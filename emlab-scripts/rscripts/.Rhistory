a<-co2EmissionsSpaghetti+geom_line(aes(y=CO2CapinTonpA),linetype = 2, colour="red", size=1)
#a
ggsave(filename="co2EmissionsSpaghetti.pdf",plot=co2EmissionsSpaghetti, width=15.66, height=10.44, units="cm")
co2EmissionPlot<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "CO2Emissions_inTonpA", "CO2 Emissions [t/a]")
a<-co2EmissionPlot+geom_line(aes(y=CO2CapinTonpA),linetype = 2, colour="red", size=1)
a
avgPricePlotinA<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "Avg_El_PricesinEURpMWh_Country_A", "Avg. Electricity Price in Country A [EUR/MW]")
#avgPricePlotinA
ggsave(filename="avgPricePlotinA.pdf",plot=avgPricePlotinA, width=15.66, height=10.44, units="cm")
avgPricePlotinB<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "Avg_El_PricesinEURpMWh_Country_B", "Avg. Electricity Price in Country B [EUR/MW]")
#avgPricePlotinB
ggsave(filename="avgPricePlotinB.pdf",plot=avgPricePlotinB, width=15.66, height=10.44, units="cm")
aggregateCash<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "AggregateCash", "Aggregated Producer Cash")
#aggregateCash
peakLoadA<-plotTimeSeriesWithConfidenceIntervalGroupedInOnePlot(bigDF, "PeakDemandPerZoneInMW_Country_A_Peak_Demand", "Peak A")
#peakLoadA
peakLoadB<-plotTimeSeriesWithConfidenceIntervalGroupedInOnePlot(bigDF, "PeakDemandPerZoneInMW_Country_B_Peak_Demand", "Peak B")
#peakLoadB
coalPrice<-plotTimeSeriesWithConfidenceIntervalGroupedInOnePlot(bigDF, "FuelPricesPerGJ_Coal", "Coal")
#coalPrice
gasPrice<-plotTimeSeriesWithConfidenceIntervalGroupedInOnePlot(bigDF, "FuelPricesPerGJ_Natural_Gas", "Gas")
#gasPrice
biomassPrice<-plotTimeSeriesWithConfidenceIntervalGroupedInOnePlot(bigDF, "FuelPricesPerGJ_Biomass", "Biomass")
#biomassPrice
aggregateCashDelta<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "AggregateFinances_Profit", "Aggregate Delta Cash Flow")
#aggregateCashDelta
supplyRatioA<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "SupplyRatioA", "Peak Capacity Supply Ratio A")
#supplyRatioA
supplyRatioB<-plotTimeSeriesWithConfidenceIntervalByFacettedGroup(bigDF, "SupplyRatioB", "Peak Capacity Supply Ratio B")
#supplyRatioB
moltenCapacities<-melt(bigDF, id.vars=c("tick", "run"), measure.vars=names(bigDF)[grepl("CapacityinMW_", names(bigDF))])
moltenCapacities$variable<-renamer(moltenCapacities$variable, "CapacityinMW_", "")
moltenCapacities$variable<-renamer(moltenCapacities$variable, "CoalPulverizedCSS", "CoalPulverizedCCS")
moltenCapacities$variable<-renamer(moltenCapacities$variable, "CoalPulverizedCCS", "CoalPSC CCS")
moltenCapacities$variable<-renamer(moltenCapacities$variable, "CoalPulverizedSuperCritical", "CoalPSC")
#moltenCapacities$run<-factor(moltenCapacities$run, levels=c("No Price Floor","Price Floor in A","Price Floor in B","Common Price Floor"))
moltenCapacities$variable<-factor(moltenCapacities$variable, levels=c('Photovoltaic','WindOffshore','Wind','Biomass','IgccCCS','CoalPSC CCS','CcgtCCS','Nuclear','IGCC','CoalPSC','CCGT','OCGT'))
generationCapacitiesFacetted<-ggplot(moltenCapacities, aes_string(x="tick", y="value"))+ #colour=run, fill=run,
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="smooth") +
stat_summary(fun.data="median_hilow", conf.int=.95, geom="smooth")+
facet_grid(variable ~ run)+
#facet_wrap(~ run)+
xlab("Time [a]")+
ylab("Capacity [MW]")+
scale_fill_hue(name="Technology")+
theme_grey(base_size=7)+
opts(legend.position="none")
#generationCapacitiesFacetted
ggsave(filename="generationCapacitiesFacetted.pdf",plot=generationCapacitiesFacetted, width=30, height=16.51, units="cm")
stackedCapacityDiagram<-ggplot(moltenCapacities, aes(x=tick, y=value))+
stat_summary(aes(fill=variable,order= -as.numeric(variable)), fun.y=median, geom="area", position="fill")+
facet_wrap( ~ run)+
xlab("Time [a]")+
ylab("Capacity [%]")+
#scale_fill_hue(name="Technology")+
theme_grey(base_size=14)+
opts(legend.position="bottom", legend.margin=unit(0.5, "cm"))+
guides(fill=guide_legend(nrow=3, keywidth=1, keylength=1, keyheight=1))+
scale_fill_brewer(type="qual", palette=3, name="Technology")
#stackedCapacityDiagram
ggsave(filename="stackedCapacityDiagram.pdf",plot=stackedCapacityDiagram, width= 15.66, height= 14, units="cm")
#moltenGeneration<-melt(bigDF, id.vars=c("tick", "run"), measure.vars= c('GenerationinMWh_Biomass', 'GenerationinMWh_CoalPulverizedSuperCritical', 'GenerationinMWh_CCGT', 'GenerationinMWh_OCGT', 'GenerationinMWh_Nuclear', 'GenerationinMWh_Wind', 'GenerationinMWh_IGCC', 'GenerationinMWh_CoalPulverizedCSS', 'GenerationinMWh_IgccCCS', 'GenerationinMWh_CcgtCCS', 'GenerationinMWh_WindOffshore', 'GenerationinMWh_Photovoltaic'))
moltenGeneration<-melt(bigDF, id.vars=c("tick", "run"), measure.vars=names(bigDF)[grepl("GenerationinMWh_", names(bigDF))])
moltenGeneration$variable<-renamer(moltenGeneration$variable, "GenerationinMWh_", "")
moltenGeneration$variable<-renamer(moltenGeneration$variable, "CoalPulverizedCSS", "CoalPulverizedCCS")
moltenGeneration$variable<-ordered(moltenGeneration$variable, levels=c('Photovoltaic','WindOffshore','Wind','Biomass','IgccCCS','CoalPulverizedCCS','CcgtCCS','Nuclear','IGCC','CoalPulverizedSuperCritical','CCGT','OCGT'))
generationFacetted<-ggplot(moltenGeneration, aes_string(x="tick", y="value", group="run", colour="run"))+ #colour=run, fill=run,
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="smooth") +
#stat_summary(fun.data="median_hilow", conf.int=.95, geom="smooth")+
#facet_grid(variable ~ .)+
facet_wrap(~ variable, scales="free_y")+
opts(legend.position="bottom")+
xlab("Time [a]")+
ylab("Generation [MWh]")+
scale_fill_hue(name="Technology")+
scale_fill_brewer(type="qual", palette=3, name="Technology")+
coord_cartesian(xlim=c(0,5))
#generationFacetted
ggsave(filename="generationFacetted.pdf",plot=generationFacetted, width=16.51, height=21.94, units="cm")
stackedGenerationDiagram<-ggplot(moltenGeneration, aes(x=tick, y=value))+
stat_summary(aes(fill=variable, order= -as.numeric(variable)), fun.y=median, geom="area", position="fill")+
facet_grid( ~ run)+
xlab("Time [a]")+
ylab("Generation [MWh]")+
scale_fill_hue(name="Technology")+
scale_fill_brewer(type="qual", palette=3, name="Technology")
#stackedGenerationDiagram
ggsave(filename="stackedGenerationDiagram.pdf",plot=stackedGenerationDiagram, width=16.51, height=8.255, units="cm")
moltenCapacityinA<-melt(bigDF, id.vars=c("tick", "run"), measure.vars=names(bigDF)[grepl("CapacityinMWinA_", names(bigDF))])
moltenCapacityinA$variable<-renamer(moltenCapacityinA$variable, "CapacityinMWinA_", "")
moltenCapacityinA$variable<-renamer(moltenCapacityinA$variable, "CoalPulverizedCSS", "CoalPulverizedCCS")
moltenCapacityinA$variable<-renamer(moltenCapacityinA$variable, "CoalPulverizedCCS", "CoalPSC CCS")
moltenCapacityinA$variable<-renamer(moltenCapacityinA$variable, "CoalPulverizedSuperCritical", "CoalPSC")
moltenCapacityinA$variable<-ordered(moltenCapacityinA$variable, levels=c('Photovoltaic','WindOffshore','Wind','Biomass','IgccCCS','CoalPSC CCS','CcgtCCS','Nuclear','IGCC','CoalPSC','CCGT','OCGT'))
stackedCapacityinADiagram<-ggplot(moltenCapacityinA, aes(x=tick, y=value))+
stat_summary(aes(fill=variable, order= -as.numeric(variable)), fun.y=median, geom="area", position="fill")+
facet_grid( ~ run)+
xlab("Time [a]")+
ylab("Capacity in A [MW]")+
scale_fill_hue(name="Technology")+
scale_fill_brewer(type="qual", palette=3, name="Technology")+
opts(legend.position="bottom", legend.margin=unit(0.5, "cm"))+
guides(fill=guide_legend(nrow=3, keywidth=1, keylength=1, keyheight=1))
#stackedCapacityinADiagram
#ggsave(filename="stackedCapacityinADiagram.pdf",plot=stackedCapacityinADiagram, width=16.51, height=8.255, units="cm")
ggsave(filename="stackedCapacityinADiagram.pdf",plot=stackedCapacityinADiagram, width=16.8, height=19.2, units="cm")
moltenCapacityinB<-melt(bigDF, id.vars=c("tick", "run"), measure.vars=names(bigDF)[grepl("CapacityinMWinB_", names(bigDF))])
moltenCapacityinB$variable<-renamer(moltenCapacityinB$variable, "CapacityinMWinB_", "")
moltenCapacityinB$variable<-renamer(moltenCapacityinB$variable, "CoalPulverizedCSS", "CoalPulverizedCCS")
moltenCapacityinB$variable<-renamer(moltenCapacityinB$variable, "CoalPulverizedCCS", "CoalPSC CCS")
moltenCapacityinB$variable<-renamer(moltenCapacityinB$variable, "CoalPulverizedSuperCritical", "CoalPSC")
moltenCapacityinB$variable<-ordered(moltenCapacityinB$variable, levels=c('Photovoltaic','WindOffshore','Wind','Biomass','IgccCCS','CoalPSC CCS','CcgtCCS','Nuclear','IGCC','CoalPSC','CCGT','OCGT'))
stackedCapacityinBDiagram<-ggplot(moltenCapacityinB, aes(x=tick, y=value))+
stat_summary(aes(fill=variable, order= -as.numeric(variable)), fun.y=median, geom="area", position="fill")+
facet_grid( ~ run)+
xlab("Time [a]")+
ylab("Capacity in B [MW]")+
scale_fill_hue(name="Technology")+
scale_fill_brewer(type="qual", palette=3, name="Technology")+
opts(legend.position="bottom", legend.margin=unit(0.5, "cm"))+
guides(fill=guide_legend(nrow=3, keywidth=1, keylength=1, keyheight=1))
#stackedCapacityinBDiagram
#ggsave(filename="stackedCapacityinBDiagram.pdf",plot=stackedCapacityinBDiagram, width=16.51, height=8.255, units="cm")
ggsave(filename="stackedCapacityinBDiagram.pdf",plot=stackedCapacityinBDiagram, width=16.8, height=19.2, units="cm")
capcitiesinBFaceted<-ggplot(moltenCapacityinB, aes_string(x="tick", y="value", colour="run", fill="run"))+ #colour=run, fill=run,
stat_summary(aes_string(colour="run", fill="run", group="run"), fun.data="median_hilow", conf.int=.5, geom="smooth") +
#stat_summary(aes_string(colour="run", fill="run", group="run"), fun.data="median_hilow", conf.int=.95, geom="smooth")+
facet_grid(variable ~ .)+
#facet_wrap(~ run)+
opts(legend.position="bottom")+
xlab("Time [a]")+
ylab("Capacity [MW]")+
scale_fill_hue(name="Technology")+
scale_fill_brewer(type="qual", palette=3, name="Technology")
#capcitiesinBFaceted
ggsave(filename="capcitiesinBFaceted.pdf",plot=capcitiesinBFaceted, width=16.51, height=21.94, units="cm")
#------------------Median Capacity Differences between no price floor and B -----------------------
applyFunToColumnInDF<- function(df=df, column=column, fun=fun) fun(df[,column])
medianCapacitiesInB<-ddply(.data=moltenCapacityinB, .variables=c("tick","run", "variable"), .fun=applyFunToColumnInDF, column="value", fun=median)
getDifferenceBetweenFloorBandNoPriceFloor<-function(df) df[df$run=="Price Floor in B",]$V1-df[df$run=="No Price Floor",]$V1
medianCapacityinBDifferenceBandNoPriceFloor<-ddply(.data=medianCapacitiesInB, .variables=c("variable", "tick"), .fun=getDifferenceBetweenFloorBandNoPriceFloor)
medianCapacitiesinA<-ddply(.data=moltenCapacityinA, .variables=c("tick","run", "variable"), .fun=applyFunToColumnInDF, column="value", fun=median)
medianCapacityinADifferenceBandNoPriceFloor<-ddply(.data=medianCapacitiesinA, .variables=c("variable", "tick"), .fun=getDifferenceBetweenFloorBandNoPriceFloor)
names(medianCapacityinADifferenceBandNoPriceFloor)[3]<-"A"
names(medianCapacityinBDifferenceBandNoPriceFloor)[3]<-"B"
medianCapacitiesFloorB<-merge(medianCapacityinADifferenceBandNoPriceFloor,medianCapacityinBDifferenceBandNoPriceFloor)
medianCapacitiesFloorB$Both<-medianCapacitiesFloorB$A+medianCapacitiesFloorB$B
medianCapacitiesFloorB<-melt(medianCapacitiesFloorB, id.vars=c("variable", "tick"), measure.vars=c("A", "B", "Both"), variable_name="Country")
names(medianCapacitiesFloorB)[1]<-"Technology"
medianCapacitiesDifferenceFloorBandNoPriceFloorPlot<-ggplot(medianCapacitiesFloorB[medianCapacitiesFloorB$Technology!=c("Photovoltaic","IgccCCS", "CoalPulverizedCCS"),], aes(x=tick, y=value, group=Country, colour=Country, linetype=Country))+
geom_line()+
facet_wrap( ~ Technology  )+
xlab("Time [a]")+
ylab("Capacity Difference [MW]")+
scale_color_discrete()+
theme_grey(base_size=8)+
opts(legend.position="bottom", strip.text.y = theme_text(size = 6, angle = 270))
#medianCapacitiesDifferenceFloorBandNoPriceFloorPlot
#ggsave(filename="medianCapacitiesDifferenceFloorBandNoPriceFloorPlot.pdf",plot=medianCapacitiesDifferenceFloorBandNoPriceFloorPlot, width=12.3825, height=43.88, units="cm")
ggsave(filename="medianCapacitiesDifferenceFloorBandNoPriceFloorPlot.pdf",plot=medianCapacitiesDifferenceFloorBandNoPriceFloorPlot, width=28, height=12, units="cm")
co2PriceVertical<-ggplot(subset(bigDF, run==c("No Price Floor", "Price Floor in B")), aes_string(x="tick", y="CO2Auction", group="run", linetype="run", colour="run"))+ #colour=run, fill=run,
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="line") +
#stat_summary(fun.data="median_hilow", conf.int=.95, geom="line")+
#facet_grid(. ~ run)+
#facet_grid(run ~ .)+
scale_color_discrete(h.start=90)+
xlab(NULL)+
ylab("CO2 Price [EUR/ton]")+
theme_grey(base_size=8)+
facet_grid(GenerationinMWh_IgccCCS ~ .)+ #just to add grid label
opts(legend.position="bottom", strip.text.y = theme_text(size = 6, angle = 270))
#co2PriceVertical
ggsave(filename="co2PriceVertical.pdf",plot=co2PriceVertical, width=11.46, height=7.0, units="cm")
#Adjusted sizes 7.83
ggsave(filename="medianDifferences.pdf",plot=(medianCapacitiesDifferenceFloorBandNoPriceFloorPlot), width=7.83, height=22, units="cm")
ggsave(filename="co2PriceVertical.pdf",plot=co2PriceVertical, width=7.83, height=4.782722513, units="cm")
#------------------Median Capacity Differences between no price floor and A -----------------------
applyFunToColumnInDF<- function(df=df, column=column, fun=fun) fun(df[,column])
medianCapacitiesInA<-ddply(.data=moltenCapacityinA, .variables=c("tick","run", "variable"), .fun=applyFunToColumnInDF, column="value", fun=median)
getDifferenceBetweenFloorAandNoPriceFloor<-function(df) df[df$run=="Price Floor in A",]$V1-df[df$run=="No Price Floor",]$V1
medianCapacityinBDifferenceAandNoPriceFloor<-ddply(.data=medianCapacitiesInB, .variables=c("variable", "tick"), .fun=getDifferenceBetweenFloorAandNoPriceFloor)
medianCapacitiesinA<-ddply(.data=moltenCapacityinA, .variables=c("tick","run", "variable"), .fun=applyFunToColumnInDF, column="value", fun=median)
medianCapacityinADifferenceAandNoPriceFloor<-ddply(.data=medianCapacitiesinA, .variables=c("variable", "tick"), .fun=getDifferenceBetweenFloorAandNoPriceFloor)
names(medianCapacityinADifferenceAandNoPriceFloor)[3]<-"A"
names(medianCapacityinBDifferenceAandNoPriceFloor)[3]<-"B"
medianCapacitiesFloorA<-merge(medianCapacityinADifferenceAandNoPriceFloor,medianCapacityinBDifferenceAandNoPriceFloor)
medianCapacitiesFloorA$Both<-medianCapacitiesFloorA$A+medianCapacitiesFloorA$B
medianCapacitiesFloorA<-melt(medianCapacitiesFloorA, id.vars=c("variable", "tick"), measure.vars=c("A", "B", "Both"), variable_name="Country")
names(medianCapacitiesFloorA)[1]<-"Technology"
medianCapacitiesDifferenceFloorAandNoPriceFloorPlot<-ggplot(medianCapacitiesFloorA[medianCapacitiesFloorA$Technology!=c("Photovoltaic","IgccCCS", "CoalPulverizedCCS"),], aes(x=tick, y=value, group=Country, colour=Country, linetype=Country))+
geom_line()+
facet_grid(Technology ~ .)+
xlab("Time [a]")+
ylab("Capacity Difference [MW]")+
scale_color_discrete()+
theme_grey(base_size=8)+
opts(legend.position="bottom", strip.text.y = theme_text(size = 6, angle = 270))
#medianCapacitiesDifferenceFloorAandNoPriceFloorPlot
ggsave(filename="medianCapacitiesDifferenceFloorAandNoPriceFloorPlot.pdf",plot=medianCapacitiesDifferenceFloorBandNoPriceFloorPlot, width=12.3825, height=43.88, units="cm")
co2PriceVerticalDifferenceA<-ggplot(subset(bigDF, run==c("No Price Floor", "Price Floor in A")), aes_string(x="tick", y="CO2Auction", group="run", linetype="run", colour="run"))+ #colour=run, fill=run,
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="line") +
#stat_summary(fun.data="median_hilow", conf.int=.95, geom="line")+
#facet_grid(. ~ run)+
#facet_grid(run ~ .)+
scale_color_discrete(h.start=90)+
xlab(NULL)+
ylab("CO2 Price [EUR/ton]")+
theme_grey(base_size=8)+
facet_grid(GenerationinMWh_IgccCCS ~ .)+ #just to add grid label
opts(legend.position="bottom", strip.text.y = theme_text(size = 6, angle = 270))
#co2PriceVerticalDifferenceA
ggsave(filename="co2PriceVerticalDifferenceA.pdf",plot=co2PriceVerticalDifferenceA, width=11.46, height=7.0, units="cm")
#Adjusted sizes 7.83
ggsave(filename="medianDifferences.pdf",plot=(medianCapacitiesDifferenceFloorBandNoPriceFloorPlot), width=7.83, height=22, units="cm")
ggsave(filename="co2PriceVertical.pdf",plot=co2PriceVertical, width=7.83, height=4.782722513, units="cm")
#--------------Volatility------------------------
bigDF$co2PriceA<-pmax(bigDF$NationalMinCO2PriceinEURpTon_CO2_price_floor_in__Country_A_, bigDF$CO2Auction)
bigDF$co2PriceB<-pmax(bigDF$NationalMinCO2PriceinEURpTon_CO2_price_floor_in__Country_B_, bigDF$CO2Auction)
co2PriceVolatilityPerRunId<-function(df, co2PriceName){
sd(diff(log(df[, co2PriceName])))/sqrt(length(diff(log(df[,co2PriceName]))))
}
sdPerRunId<-function(df,co2PriceName) sd(df[,co2PriceName])
ddply(ddply(bigDF, .variables=c("runId", "run"), .fun=sdPerRunId, "co2PriceA"), .variables="run", .fun=applyFunToColumnInDF ,fun=quantile, column="V1")
ddply(ddply(bigDF, .variables=c("runId", "run"), .fun=sdPerRunId, "co2PriceB"), .variables="run", .fun=applyFunToColumnInDF ,fun=quantile, column="V1")
moltenCO2Prices<-melt(data=bigDF, id.vars=c("runId", "run", "tick"), measure.vars=c("co2PriceA", "co2PriceB"))
moltenCO2Prices$run<-factor(moltenCO2Prices$run, levels=c("No Price Floor","Price Floor in A","Price Floor in B","Common Price Floor"))
moltenCO2Prices$variable<-renamer(moltenCO2Prices$variable, "co2PriceA", "Country A")
moltenCO2Prices$variable<-renamer(moltenCO2Prices$variable, "co2PriceB", "Country B")
moltenCO2Prices$variable<-factor(moltenCO2Prices$variable, levels=c("Country A","Country B"))
sdOfCO2Prices<-ddply(moltenCO2Prices, .variables=c("runId", "run", "variable"), .fun=sdPerRunId, "value")
boxPlotSDCO2Prices<-qplot(x=run, y=V1, data=sdOfCO2Prices, geom="boxplot")+facet_grid(variable ~ .)+
xlab("Scenario")+
ylab("Standard deviation of CO2 Prices")+
theme_grey(base_size=13)
#boxPlotSDCO2Prices
ggsave(filename="boxPlotSDCO2Prices.pdf",plot=boxPlotSDCO2Prices, width=15.66, height=12, units="cm")
ddply(moltenCO2Prices, .variables=c("run", "variable"), .fun=function(df, columnname) quantile(df[,columnname]), "value")
#----------Median Price differences---------------------
moltenElectricityPrices<-melt(bigDF, id.vars=c("tick", "run"), measure.vars=c("Avg_El_PricesinEURpMWh_Country_A", "Avg_El_PricesinEURpMWh_Country_B"))
medianElectricityPrices<-ddply(.data=moltenElectricityPrices, .variables=c("tick","run", "variable"), .fun=applyFunToColumnInDF, column="value", fun=median)
medianElectricityPricePlot<-ggplot(data=medianElectricityPrices, aes(x=tick, y=V1, group=run, linetype=run, colour=run))+
geom_line()+
facet_grid(variable ~ .)
medianElectricityPricePlot
electricityPricesPlot<-ggplot(moltenElectricityPrices, aes(x=tick, y=value, group=run, colour=run, linetype=run))+ #colour=run, fill=run,
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="errorbar") +
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="line") +
#stat_summary(aes(fill=run),fun.data="median_hilow", conf.int=.95, geom="smooth")+
#facet_grid(. ~ run)+
facet_wrap(~ variable)+
opts(legend.position="bottom")+
xlab("Time [a]")+
ylab("Average Electricity Price [EUR/MWh]")+
scale_color_brewer(type="qual", palette=2)+
scale_fill_brewer(type="qual", palette=2)
#electricityPricesPlot
moltenElectricityPriceswithRunId<-melt(bigDF, id.vars=c("tick", "run", "runId"), measure.vars=c("Avg_El_PricesinEURpMWh_Country_A", "Avg_El_PricesinEURpMWh_Country_B"))
electricityPriceSpaghettiPlot<-ggplot(moltenElectricityPriceswithRunId, aes(x=tick, y=value))+
geom_line(aes(group=runId, linestyle=runId), alpha=I(0.2))+
stat_summary(fun.data="median_hilow", conf.int=0.95, geom="smooth", alpha=I(0.5))+
stat_summary(aes_string(fill="run"), fun.data="median_hilow", conf.int=.5, geom="smooth") +
facet_grid(run ~ variable)+
opts(legend.position="none")
#electricityPriceSpaghettiPlot
#-----------------Median generation differences------------
library(rjson)
library(RCurl)
options(warn=-1)
### FUNCTIONS ###
startSimulation <- function() {
return(fromJSON(file="http://localhost:8080/agentspring-face/engine/start"))
}
stopSimulation <- function() {
return(fromJSON(file="http://localhost:8080/agentspring-face/engine/stop"))
}
pauseSimulation <- function() {
return(fromJSON(file="http://localhost:8080/agentspring-face/engine/pause"))
}
resumeSimulation <- function() {
return(fromJSON(file="http://localhost:8080/agentspring-face/engine/resume"))
}
statusSimulation <- function(){
return(fromJSON(file="http://localhost:8080/agentspring-face/engine/status"))
}
isPausedSimulation <- function() {
status <- fromJSON(file="http://localhost:8080/agentspring-face/engine/status")
return(status$state == "PAUSED")
}
waitPauseSimulation <- function() {
pauseSimulation()
while (!isPausedSimulation()) {
Sys.sleep(5)
}
return(TRUE)
}
tickSimulation <- function() {
status <- statusSimulation()
return(status$tick)
}
querySimulation <- function(start, query) {
urlStr <- paste("http://localhost:8080/agentspring-face/db/query?start=",start,"&query=",curlEscape(query),sep="")
return(fromJSON(file=urlStr))
}
runSimulation <- function(x, ticks) {
startSimulation()
tick <- 0
while (tick < ticks) {
waitPauseSimulation()
tick <- tickSimulation()
x(tick)
resumeSimulation()
tick <- tick + 1
}
st <- stopSimulation()
}
### END FUNCTIONS ###
#install.packages("ggplot2",dependencies=TRUE)
#install.packages("rjson",dependencies=TRUE)
#install.packages("RCurl",dependencies=TRUE)
library(ggplot2)
### SET DIR ###
#setwd("/home/ejlchappin/Documents/d13n/rscripts")
setwd("/home/joern/d13n/rscripts")
source("simulation.R")
createReport <-function(tick) {
#for (segment in 1:5) {
#  drawSupplyDemandForMarketSegment("ElectricitySpotMarket",segment)
#}
#drawSupplyDemandForMarketBySubstance("CommodityMarket","Natural Gas")
#drawSupplyDemandForMarketBySubstance("CommodityMarket","Coal")
#drawSupplyDemandForMarketBySubstance("CommodityMarket","Biomass")
#drawSupplyDemandForMarket("CO2Auction")
drawCapacities()
#drawGeneration()
#drawBidPrices()
#drawProducerCosts()
#drawProducerRevenue()
#drawProducerProfit()
}
getBidCurve <- function(data) {
amounts <- c(0)
prices <- c(0)
amount <- 0
for (dt in data$result) {
for (bid in dt) {
prices <- c(prices,bid$properties$price)
amount <- amount + bid$properties$amount
amounts <- c(amounts,amount)
}
}
prices <- c(prices,0)
amounts <- c(amounts,amount)
return(as.data.frame(cbind(amounts,prices)))
}
getClearingPoint <-function(data) {
for (dt in data$result) {
for (point in dt) {
return(c(point$properties$price, point$properties$volume))
}
}
}
getMax <- function(one, two) {
if (max(one) > max(two)) {
return(one)
} else {
return(two)
}
}
drawSupplyDemandForMarketSegment <- function(market, segment) {
demandBids <- querySimulation(market, paste("v.in('segmentmarket').filter{it.segmentID==",segment,"}.back(2).in('market').filter{it.time==tick && it.supplyBid==false}.collect{it}.sort{it.price}.reverse()",sep=""))
supplyBids <- querySimulation(market, paste("v.in('segmentmarket').filter{it.segmentID==",segment,"}.back(2).in('market').filter{it.time==tick && it.supplyBid==true}.collect{it}.sort{it.price}",sep=""))
cpData<-querySimulation(market, paste("v.in('segmentmarket').filter{it.segmentID==",segment,"}.back(2).out('clearingpoint').filter{it.time==tick}",sep=""))
cp <- getClearingPoint(cpData)
supply <- getBidCurve(supplyBids)
demand <- getBidCurve(demandBids)
cpDf <- data.frame(amounts=supply$amounts,prices=supply$prices,clearedprice=cp[1],clearedvolume=cp[2])
p <- ggplot()+geom_step(data=supply, aes(x=amounts, y=prices),direction = "vh", colour="blue") + geom_step(data=demand, aes(x=amounts, y=prices),direction = "vh",colour="red")
p <- p + xlab("Amount") + ylab("Price")
p <- p + geom_line(data=cpDf, aes(x = amounts, y = clearedprice), colour = "black",linetype = 2) + geom_line(data=cpDf, aes(x = clearedvolume, y = prices), colour = "black",linetype = 2)
p <- p + opts(title=paste(market,"segment:",segment,"p:",round(cp[1],digits=2),"v:",round(cp[2],digits=0)))
print(p)
}
drawSupplyDemandForMarketBySubstance <- function(market, substance) {
demandBids <- querySimulation(market, paste("v.in('substancemarket').filter{it.name=='",substance,"'}.back(2).in('market').filter{it.time==tick && it.supplyBid==false}.collect{it}.sort{it.price}.reverse()",sep=""))
supplyBids <- querySimulation(market, paste("v.in('substancemarket').filter{it.name=='",substance,"'}.back(2).in('market').filter{it.time==tick && it.supplyBid==true}.collect{it}.sort{it.price}",sep=""))
cpData<-querySimulation(market, paste("v.in('substancemarket').filter{it.name=='",substance,"'}.back(2).out('clearingpoint').filter{it.time==tick}",sep=""))
cp <- getClearingPoint(cpData)
supply <- getBidCurve(supplyBids)
demand <- getBidCurve(demandBids)
cpDf <- data.frame(amounts=supply$amounts,prices=supply$prices,clearedprice=cp[1],clearedvolume=cp[2])
p <- ggplot()+geom_step(data=supply, aes(x=amounts, y=prices),direction = "vh", colour="blue") + geom_step(data=demand, aes(x=amounts, y=prices),direction = "vh",colour="red")
p <- p + xlab("Amount") + ylab("Price")
p <- p + geom_line(data=cpDf, aes(x = amounts, y = clearedprice), colour = "black",linetype = 2) + geom_line(data=cpDf, aes(x = clearedvolume, y = prices), colour = "black",linetype = 2)
p <- p + opts(title=paste(market,"substance:",substance,"p:",round(cp[1],digits=2),"v:",round(cp[2],digits=0))) + scale_x_log10() + scale_y_log10()
print(p)
}
drawSupplyDemandForMarket <- function(market) {
demandBids <- querySimulation(market, paste("v.in('market').filter{it.time==tick && it.supplyBid==false}.collect{it}.sort{it.price}.reverse()",sep=""))
supplyBids <- querySimulation(market, paste("v.in('market').filter{it.time==tick && it.supplyBid==true}.collect{it}.sort{it.price}",sep=""))
cpData<-querySimulation(market, paste("v.out('clearingpoint').filter{it.time==tick}",sep=""))
cp <- getClearingPoint(cpData)
supply <- getBidCurve(supplyBids)
demand <- getBidCurve(demandBids)
cpDf <- data.frame(amounts=supply$amounts,prices=supply$prices,clearedprice=cp[1],clearedvolume=cp[2])
p <- ggplot()+geom_step(data=supply, aes(x=amounts, y=prices),direction = "vh", colour="blue") + geom_step(data=demand, aes(x=amounts, y=prices),direction = "vh",colour="red")
p <- p + xlab("Amount") + ylab("Price")
p <- p + geom_line(data=cpDf, aes(x = amounts, y = clearedprice), colour = "black",linetype = 2) + geom_line(data=cpDf, aes(x = clearedvolume, y = prices), colour = "black",linetype = 2)
p <- p + opts(title=paste(market,"p:",round(cp[1],digits=2),"v:",round(cp[2],digits=0))) + scale_x_log10() + scale_y_log10()
print(p)
}
drawCapacities <- function() {
capacityByTech <- querySimulation("PowerGeneratingTechnology", "[v.name, v.in('TECHNOLOGY').filter{((it.constructionStartTime + it.actualPermittime + it.actualLeadtime) < tick) && (it.dismantleTime > tick || it.dismantleTime == 0)}.out('TECHNOLOGY').capacity.sum()]")
capacities <- c()
techs <- c()
for (tech in capacityByTech$result) {
if (!is.null(tech[[2]])) {
capacities <- c(capacities,tech[[2]])
techs <- c(techs,tech[[1]])
}
}
pct <- round(capacities/sum(capacities)*100)
techs <- paste(techs, pct) # add percents to labels
techs <- paste(techs,"%",sep="") # ad % to labels
pie(capacities, labels = techs, main="Capacities by Technology")
}
drawGeneration <- function() {
capacityByTech <- querySimulation("PowerGeneratingTechnology", "[v.name, v.in('technology').in('plant').filter{it.time==tick && it.status>=2 && it.supplyBid==true}.acceptedAmount.sum()]")
capacities <- c()
techs <- c()
for (tech in capacityByTech$result) {
if (!is.null(tech[[2]])) {
capacities <- c(capacities,tech[[2]])
techs <- c(techs,tech[[1]])
}
}
pct <- round(capacities/sum(capacities)*100)
techs <- paste(techs, pct) # add percents to labels
techs <- paste(techs,"%",sep="") # ad % to labels
pie(capacities, labels = techs, main="Generation by Technology")
}
drawBidPrices <- function() {
dt <- querySimulation("PowerGeneratingTechnology", "list = v.in('technology').in('plant').filter{it.time==tick && it.status>=2 && it.supplyBid==true}.price.toList(); avgPrice = list.size() > 0 ? list.sum() / list.size() : null; [v.name, avgPrice]")
prices <- c()
techs <- c()
for (tech in dt$result) {
if (!is.null(tech[[2]])) {
prices <- c(prices,tech[[2]])
techs <- c(techs,tech[[1]])
}
}
barplot(prices, main="Average Bid Prices by Technology ", names.arg=techs, cex.names=0.8)
}
getProducerCashFlows <- function() {
pp <- querySimulation("EnergyProducer", "revenues = v.in('to').filter{it.money>0 && it.time == tick}.money.sum(); co2costs = v.in('from').filter{it.type==6 && it.time ==tick}.money.sum(); fuelcosts = v.in('from').filter{it.type==4 && it.time == tick}.money.sum(); loancosts = v.in('from').filter{it.type==7 && it.time == tick}.money.sum();omcosts = v.in('from').filter{it.type==3 && it.time == tick}.money.sum();[v.name, [['Revenue',revenues],['CO2 Costs',co2costs],['Fuel Costs',fuelcosts],['Capital Costs',loancosts], ['OM Costs',omcosts]]]")
df<-NULL;
for (dt in pp$result) {
pname <- dt[1]
for (ss in dt[[2]]) {
rbind(df,c(pname, ss[[1]],ss[[2]]))->df
}
}
colnames(df) <- c("producer", "cashflow", "amount")
df <- as.data.frame(df, stringsAsFactors=TRUE)
df$amount <- as.numeric(df$amount)
df$producer <- unlist(df$producer)
df$cashflow <- unlist(df$cashflow)
return(df)
}
getProducerProfit <- function() {
df <- getProducerCashFlows()
revenue <- df[df$cashflow=='Revenue',]
costs <- df[df$cashflow!='Revenue',]
dd<-NULL;
for (producer in unique(df$producer)) {
totalCosts <- sum(costs[costs$producer==producer,]$amount)
totalRevenue <- revenue[revenue$producer==producer,]$amount
rbind(dd,c(producer, totalCosts,totalRevenue, round(totalRevenue-totalCosts)))->dd
}
colnames(dd) <- c("producer", "costs", "revenue","profit")
return(as.data.frame(dd))
}
drawProducerRevenue <- function() {
df <- getProducerCashFlows()
revenue <- df[df$cashflow=='Revenue',]
p <- ggplot(data=revenue, aes(x=factor(""), y=amount, fill=factor(cashflow))) + geom_bar(width = 1) +  xlab("") + ylab("Revenue")+ facet_grid(~ producer)
print(p)
}
drawProducerCosts <- function() {
df <- getProducerCashFlows()
costs <- df[df$cashflow!='Revenue',]
p <- ggplot(data=costs, aes(x=factor(""), y=amount, fill=factor(cashflow))) + geom_bar(width = 1) +  xlab("") + ylab("Revenue")+ facet_grid(~ producer)
print(p)
}
drawProducerProfit <- function() {
df <- getProducerProfit()
p <- ggplot(data=df, aes(x=factor(""), y=profit)) + geom_bar(width = 1) +  xlab("") + ylab("Profit")+ facet_grid(~ producer)
print(p)
}
##################
##################
##stacked area
#p <- ggplot(df, aes( DomAreaByCat, PopDen)) + geom_area(aes(colour = PR_Cat, fill= PR_Cat), position = 'stack')
### pie
#ggplot(data=df[df$gender=='Male',], aes(x=factor(1), y=Summary, fill = factor(response))) + geom_bar(width = 1) + coord_polar(theta="y") +
# xlab('Males') +
# ylab('') +
# labs(fill='Response')
#####################
fix(runSimulation)
fix(runSimulation)
fix(resumeSimulation)
fix(runSimulation)
